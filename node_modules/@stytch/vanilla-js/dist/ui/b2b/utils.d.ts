/// <reference types="react" />
import { SWRMutationHook } from 'swr/mutation';
import { B2BAuthenticateResponseWithMFA, B2BDiscoveryAuthenticateResponse, B2BMagicLinksDiscoveryAuthenticateResponse, StytchB2BUIConfig } from '@stytch/core/public';
import { OrganizationBySlugMatch } from '@stytch/core/public';
import { Action } from './reducer';
export declare const useMutate: SWRMutationHook;
/**
 *
 * This hook triggers a request to retrieve the organization from the slug.
 * The hook only triggers the request if the SDK is being used in an organization flow,
 * and a slug pattern is present. The hook returns an isSearching boolean that can be used
 * to display a loading state while the search is in progress.
 */
export declare const useExtractSlug: () => {
    isSearching: boolean;
    slug: string | null;
    pattern: string | null | undefined;
};
export declare const useBootstrap: () => import("@stytch/core").BootstrapData;
export declare const onAuthenticateSuccess: (data: B2BAuthenticateResponseWithMFA, dispatch: React.Dispatch<Action>, config: StytchB2BUIConfig) => void;
export declare const onDiscoveryAuthenticateSuccess: (data: B2BDiscoveryAuthenticateResponse | B2BMagicLinksDiscoveryAuthenticateResponse, dispatch: React.Dispatch<Action>) => void;
export declare const usePasswordInput: () => {
    stytch: import("../../b2b").StytchB2BUIClient;
    onError: (error: import("@stytch/core/public").StytchSDKUIError) => void;
    email: string;
    setEmail: import("react").Dispatch<import("react").SetStateAction<string>>;
    password: string;
    setPassword: import("react").Dispatch<import("react").SetStateAction<string>>;
    organization: OrganizationBySlugMatch | null;
    errorMessage: string;
    setErrorMessage: import("react").Dispatch<import("react").SetStateAction<string>>;
    isSubmitting: boolean;
    setIsSubmitting: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    submitPassword: (organization_id: string) => void;
    submitDiscoveryPassword: () => void;
    handleNonMemberReset: () => void;
};
export declare const extractFromPattern: (pattern: string | null, href: string) => string | null;
