import { RequireAllOrNone } from 'type-fest';
import { ConnectionType } from '../utils/ConnectionType';
import { ExternalTaggedConnection, OIDCTaggedConnection, SAMLTaggedConnection, TaggedConnection } from './TaggedConnection';
export type SamlKnownIdp = 'generic' | 'okta' | 'microsoft-entra' | 'google-workspace';
export type OidcKnownIdp = 'generic' | 'okta' | 'microsoft-entra';
export type KnownIdp = SamlKnownIdp | OidcKnownIdp;
export type SamlSetupStep = 'createApplication' | 'copyToIdp' | 'copyFromIdp' | 'attributeMapping';
export type SamlIdpValue = 'ssoUrl' | 'entityId' | 'certificate';
export type OidcSetupStep = 'createApplication' | 'copyToIdp' | 'copyFromIdp';
export type SamlSupportedIdp = 'okta' | 'microsoft-entra' | 'google-workspace';
export type OidcSupportedIdp = 'okta' | 'microsoft-entra';
export type SamlSupportedManualConfigurationIdp = 'microsoft-entra' | 'google-workspace';
export type SamlSupportedAttributeMappingIdp = 'okta' | 'microsoft-entra' | 'google-workspace';
export type SamlIdpInfo = {
    displayName: string;
    copyToIdpDisplayName: string;
    setupOrder: SamlSetupStep[];
    idpValueOrder: SamlIdpValue[];
    acsUrlLabel: string;
    audienceUriLabel: string;
    idpSsoUrlLabel: string;
    idpEntityIdLabel: string;
    x509CertificateLabel: string;
    metadataUrlLabel: string | false;
    nameIdFormatLabel: string;
    nameIdFormatValue: string;
    attributeMappingLabel: string;
};
interface IssuerTransformer {
    issuerDerivedLabel: string;
    transformInputToIssuer?: (input: string) => string;
    extractIssuerFromInput?: (input: string) => string | undefined;
}
export type OidcIdpInfo = {
    displayName: string;
    copyToIdpDisplayName: string;
    setupOrder: OidcSetupStep[];
    redirectUrlLabel: string;
    clientIdLabel: string;
    clientSecretLabel: string;
    issuerLabel: string;
} & RequireAllOrNone<IssuerTransformer, keyof IssuerTransformer>;
export declare const samlIdpMap: {
    readonly generic: {
        readonly displayName: "Custom SAML";
        readonly copyToIdpDisplayName: "your IdP";
        readonly setupOrder: ["copyToIdp", "attributeMapping", "copyFromIdp"];
        readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
        readonly acsUrlLabel: "ACS URL (Reply URL)";
        readonly audienceUriLabel: "Audience URI (SP Entity ID)";
        readonly idpSsoUrlLabel: "IdP Sign-on URL";
        readonly idpEntityIdLabel: "IdP Entity ID";
        readonly x509CertificateLabel: "x509 Certificate (PEM Format)";
        readonly metadataUrlLabel: "Metadata URL";
        readonly nameIdFormatLabel: "Name ID Format";
        readonly nameIdFormatValue: "Primary Email Address";
        readonly attributeMappingLabel: "Attribute Mapping";
    };
    readonly 'microsoft-entra': {
        readonly displayName: "Entra SAML";
        readonly copyToIdpDisplayName: "Entra";
        readonly setupOrder: ["createApplication", "copyToIdp", "attributeMapping", "copyFromIdp"];
        readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
        readonly acsUrlLabel: "Reply URL (Assertion Consumer Service URL)";
        readonly audienceUriLabel: "Identifier (Entity ID)";
        readonly idpSsoUrlLabel: "Login Url";
        readonly idpEntityIdLabel: "Microsoft Entra Identifier";
        readonly x509CertificateLabel: "PEM Certificate";
        readonly metadataUrlLabel: "App Federation Metadata Url";
        readonly nameIdFormatLabel: "Unique User Identifier (Name ID) Format";
        readonly nameIdFormatValue: "user.primaryauthoritativeemail";
        readonly attributeMappingLabel: "Claim Names";
    };
    readonly okta: {
        readonly displayName: "Okta SAML";
        readonly copyToIdpDisplayName: "Okta";
        readonly setupOrder: ["createApplication", "copyToIdp", "attributeMapping", "copyFromIdp"];
        readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
        readonly acsUrlLabel: "Single sign-on URL";
        readonly audienceUriLabel: "Audience URI (SP Entity ID)";
        readonly idpSsoUrlLabel: "Sign-on URL";
        readonly idpEntityIdLabel: "Issuer";
        readonly x509CertificateLabel: "Signing Certificate";
        readonly metadataUrlLabel: "Metadata URL";
        readonly nameIdFormatLabel: "Name ID Format";
        readonly nameIdFormatValue: "EmailAddress";
        readonly attributeMappingLabel: "Attribute Statements";
    };
    readonly 'google-workspace': {
        readonly displayName: "Google SAML";
        readonly copyToIdpDisplayName: "Google";
        readonly setupOrder: ["createApplication", "copyFromIdp", "copyToIdp", "attributeMapping"];
        readonly idpValueOrder: ["entityId", "ssoUrl", "certificate"];
        readonly acsUrlLabel: "ACS URL";
        readonly audienceUriLabel: "Entity ID";
        readonly idpSsoUrlLabel: "SSO URL";
        readonly idpEntityIdLabel: "Entity ID";
        readonly x509CertificateLabel: "Certificate";
        readonly metadataUrlLabel: false;
        readonly nameIdFormatLabel: "NameID Format";
        readonly nameIdFormatValue: "EMAIL; Basic Information > Primary email";
        readonly attributeMappingLabel: "Attribute Mapping";
    };
};
export declare const oidcIdpMap: {
    readonly generic: {
        readonly displayName: "Custom OIDC";
        readonly copyToIdpDisplayName: "your IdP";
        readonly setupOrder: ["copyToIdp", "copyFromIdp"];
        readonly redirectUrlLabel: "Redirect URI";
        readonly clientIdLabel: "Client ID";
        readonly clientSecretLabel: "Client Secret";
        readonly issuerLabel: "Issuer";
    };
    readonly 'microsoft-entra': {
        readonly displayName: "Entra OIDC";
        readonly copyToIdpDisplayName: "Entra";
        readonly setupOrder: ["createApplication", "copyToIdp", "copyFromIdp"];
        readonly redirectUrlLabel: "Redirect URI";
        readonly clientIdLabel: "Application (Client) ID";
        readonly clientSecretLabel: "Client Secret";
        readonly issuerLabel: "Issuer";
        readonly issuerDerivedLabel: "Directory (tenant) ID";
        readonly extractIssuerFromInput: (input: string) => string | undefined;
        readonly transformInputToIssuer: (id: string) => string;
    };
    readonly okta: {
        readonly displayName: "Okta OIDC";
        readonly copyToIdpDisplayName: "Okta";
        readonly setupOrder: ["createApplication", "copyToIdp", "copyFromIdp"];
        readonly redirectUrlLabel: "Sign-in Redirect URI";
        readonly clientIdLabel: "Client ID";
        readonly clientSecretLabel: "Client Secret";
        readonly issuerLabel: "Okta URL (Issuer)";
    };
};
type SamlTaggedIdpInfo = {
    idp: SamlIdpInfo;
    type: 'saml';
};
type OidcTaggedIdpInfo = {
    idp: OidcIdpInfo;
    type: 'oidc';
};
export type TaggedIdpInfo = SamlTaggedIdpInfo | OidcTaggedIdpInfo;
type IdpInfoReturnType<TConnectionType extends ConnectionType> = TaggedIdpInfo & {
    type: TConnectionType;
};
export declare const getIdpInfo: <TConnectionType extends ConnectionType>(idp: string, type: TConnectionType) => IdpInfoReturnType<TConnectionType>;
type IdpAndConnectionInfoReturnType<TConnectionType extends ConnectionType> = ((SamlTaggedIdpInfo & {
    connection: SAMLTaggedConnection;
}) | (OidcTaggedIdpInfo & {
    connection: OIDCTaggedConnection;
}) | {
    idp: undefined;
    type: 'external';
    connection: ExternalTaggedConnection;
}) & {
    type: TConnectionType;
};
export declare const getIdpAndConnectionInfo: <TConnectionType extends ConnectionType>(connection: TaggedConnection & {
    connectionType: TConnectionType;
}) => IdpAndConnectionInfoReturnType<TConnectionType>;
export declare const typeToUserFriendlyName: (type: ConnectionType) => string;
export {};
